@page "/Admin"
@inject NavigationManager NavManager
@inject HttpClient Http



<AuthorizeView>
    <Authorized>
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-6 mb-0">
                    <h1 class="mb-0">Users</h1>
                </div>
                <div class="col-lg-6 mt-auto ">
                </div>
            </div>
            @if (users is null)
            {
                @if (errorMessage is not null)
                {
                    <p><em>@errorMessage</em></p>
                }
                else
                {
                    <p><em>Loading Data...</em></p>
                }
            }
            else
            {
                <table class="table table-striped table-hover table-sm table-dark" cellspacing="25">
                    <thead class="table-bordered ">
                        <tr>
                            <th>
                                Name
                            </th>
                            <th>
                                Geburtstag
                            </th>
                            <th>
                                Religion
                            </th>
                            <th>
                                Geschl.
                            </th>
                            <th>
                                Gender
                            </th>
                            <th>
                                Nationalität
                            </th>
                            <th>
                                Roles
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in users)
                        {
                            <tr>
                                <td>
                                    @user.FirstName @user.LastName
                                </td>
                                <td>
                                    @user.BirthDate
                                </td>
                                <td>
                                    @user.Religion
                                </td>
                                <td>
                                    @user.Sex
                                </td>
                                <td>
                                    @user.Gender
                                </td>
                                <td>
                                    @user.Nationality
                                </td>
                                <td>
                                    @foreach (var userRole in userRoles.Where(p => p.Id == user.ProfileId))
                                    {
                                        @foreach(var role in userRole.Roles) 
                                        {
                                            @role.Value 
                                        }
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
        <ul>
            <li>List Users</li>
            <li>Selct Users</li>
            <li>Edit Users</li>
            <li>Edit User Roles</li>
        </ul>
    </Authorized>
    <NotAuthorized>
        <h1>Hello, world!</h1>
        Please <a href="login">Log In</a> to use this service.
    </NotAuthorized>
</AuthorizeView>



@code {
    private User[] users;
    private UserRole[] userRoles;
    private Role[] roles;

    private string errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await Http.GetFromJsonAsync<User[]>("https://localhost:44372/Api/Users/GetAll");
            userRoles = await Http.GetFromJsonAsync<UserRole[]>("https://localhost:44372/Api/_Admin/Users/GetAllUsers");
            roles = await Http.GetFromJsonAsync<Role[]>("https://localhost:44372/Api/_Admin/Users/GetAllRoles");
        }
        catch (Exception exception)
        {
            errorMessage = exception.ToString();
        }
    }

    public class User
    {
        public int Id { get; set; }
        public string ProfileId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string BirthDate { get; set; }
        public string Religion { get; set; }
        public string Sex { get; set; }
        public string Gender { get; set; }
        public string Nationality { get; set; }
        public string Nationality2 { get; set; }
        public byte[] Picture { get; set; }
        public byte[] PictureAlt { get; set; }

        public virtual UserContactData ContactData { get; set; }
        public virtual ICollection<UserEducation> EducationHistory { get; set; }
        public virtual ICollection<UserJobHistory> JobHistory { get; set; }
        public virtual ICollection<UserSkill> Skills { get; set; }
        public virtual ICollection<UserWebsite> Websites { get; set; }
        public virtual ICollection<Application> Applications { get; set; }
        public virtual ICollection<Jobsuche> JobsGesucht { get; set; }
    }

    public class UserContactData
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public string AddressNation { get; set; }
        public string AddressCity { get; set; }
        public string AddressStreet { get; set; }
        public string AddressState { get; set; }
        public string PhoneNumber { get; set; }
        public string PhoneNumberAlt { get; set; }
        public string EmailAddress { get; set; }
        public string EmailAddressAlt { get; set; }
        public bool Current { get; set; }
    }

    public class UserEducation
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public string Title { get; set; }
        public string Facility { get; set; }
        public string FacilityAddressCity { get; set; }
        public string FacilityAddressStreet { get; set; }
        public string FacilityAddressState { get; set; }
        public string Graduation { get; set; }
        public string TestimonyUrl { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
    }

    public class UserJobHistory
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public string Title { get; set; }
        public string Descritpion { get; set; }
        public string SkillSummary { get; set; }
        public string TestimonyUrl { get; set; }
        public decimal Salary { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public bool Current { get; set; }
    }

    public class UserSkill
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public string SkillName { get; set; }
        public string SkillDescription { get; set; }
        public string SselfRating { get; set; }
        public bool Current { get; set; }
    }

    public class UserWebsite
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public string Name { get; set; }
        public string Content { get; set; }
        public string Url { get; set; }
    }

    public class Application
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public int? JobOfferId { get; set; }
        public string Title { get; set; }
        public string Answer { get; set; }
        public DateTime DateSent { get; set; }
        public DateTime DateAnswered { get; set; }
    }

    public class Jobsuche
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public int JobOfferId { get; set; }
        public int? CompanyId { get; set; }
        public string Email { get; set; }
        public int JobId { get; set; }
        public string Status { get; set; }
        public DateTime DateSent { get; set; }
        public DateTime DateAnswered { get; set; }
        public byte[] Proof { get; set; }
    }

    public class UserRole
    {
        public string Id { get; set; }
        public string Email { get; set; }
        public Dictionary<string, string> Roles { get; set; }
    }

    @*public class AppUserName
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public bool IsAdmin { get; set; }
        public string AuthId { get; set; }
    }*@

    public class Role
    {
        public string Key { get; set; }
        public string Value { get; set; }
    }
}