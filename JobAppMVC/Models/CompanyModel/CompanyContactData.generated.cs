//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v2.0.5.6
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace JobApp.Models.CompanyModel
{
   /// <summary>
   /// Ways to contact a given company
   /// </summary>
   public class CompanyContactData
   {
      //partial void Init();

      ///// <summary>
      ///// Default constructor. Protected due to required properties, but present because EF needs it.
      ///// </summary>
      //protected CompanyContactData()
      //{
      //   Init();
      //}

      ///// <summary>
      ///// Replaces default constructor, since it's protected. Caller assumes responsibility for setting all required values before saving.
      ///// </summary>
      //public static CompanyContactData CreateCompanyContactDataUnsafe()
      //{
      //   return new CompanyContactData();
      //}

      ///// <summary>
      ///// Public constructor with required data
      ///// </summary>
      ///// <param name="companyid">Required</param>
      ///// <param name="name">Required, Max length = 50</param>
      ///// <param name="phonenumber">Max length = 30</param>
      ///// <param name="phonenumberalt">Max length = 50</param>
      ///// <param name="emailaddress">Max length = 50</param>
      ///// <param name="emailaddressalt">Max length = 50</param>
      ///// <param name="isactive">Required</param>
      ///// <param name="_companybranch0"></param>
      //public CompanyContactData(int companyid, string name, string phonenumber, string phonenumberalt, string emailaddress, string emailaddressalt, bool isactive, global::JobApp.Models.CompanyModel.CompanyBranch _companybranch0)
      //{
      //   this.CompanyId = companyid;

      //   if (string.IsNullOrEmpty(name)) throw new ArgumentNullException(nameof(name));
      //   this.Name = name;

      //   if (string.IsNullOrEmpty(phonenumber)) throw new ArgumentNullException(nameof(phonenumber));
      //   this.PhoneNumber = phonenumber;

      //   if (string.IsNullOrEmpty(phonenumberalt)) throw new ArgumentNullException(nameof(phonenumberalt));
      //   this.PhoneNumberAlt = phonenumberalt;

      //   if (string.IsNullOrEmpty(emailaddress)) throw new ArgumentNullException(nameof(emailaddress));
      //   this.EmailAddress = emailaddress;

      //   if (string.IsNullOrEmpty(emailaddressalt)) throw new ArgumentNullException(nameof(emailaddressalt));
      //   this.EmailAddressAlt = emailaddressalt;

      //   this.IsActive = isactive;

      //   if (_companybranch0 == null) throw new ArgumentNullException(nameof(_companybranch0));
      //   _companybranch0.Contacts.Add(this);


      //   Init();
      //}

      ///// <summary>
      ///// Static create function (for use in LINQ queries, etc.)
      ///// </summary>
      ///// <param name="companyid">Required</param>
      ///// <param name="name">Required, Max length = 50</param>
      ///// <param name="phonenumber">Max length = 30</param>
      ///// <param name="phonenumberalt">Max length = 50</param>
      ///// <param name="emailaddress">Max length = 50</param>
      ///// <param name="emailaddressalt">Max length = 50</param>
      ///// <param name="isactive">Required</param>
      ///// <param name="_companybranch0"></param>
      //public static CompanyContactData Create(int companyid, string name, string phonenumber, string phonenumberalt, string emailaddress, string emailaddressalt, bool isactive, global::JobApp.Models.CompanyModel.CompanyBranch _companybranch0)
      //{
      //   return new CompanyContactData(companyid, name, phonenumber, phonenumberalt, emailaddress, emailaddressalt, isactive, _companybranch0);
      //}

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Identity, Required
      /// </summary>
      [Key]
      [Required]
      public int Id { get; protected set; }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public int CompanyId { get; set; }

      /// <summary>
      /// FK to a companies branch
      /// </summary>
      public int? CompanyBranchId { get; set; }

      /// <summary>
      /// Required, Max length = 50
      /// </summary>
      [Required]
      [MaxLength(50)]
      [StringLength(50)]
      public string Name { get; set; }

      /// <summary>
      /// Required, Max length = 30
      /// </summary>
      [Required]
      [MaxLength(30)]
      [StringLength(30)]
      public string PhoneNumber { get; set; }

      /// <summary>
      /// Required, Max length = 50
      /// </summary>
      [Required]
      [MaxLength(50)]
      [StringLength(50)]
      public string PhoneNumberAlt { get; set; }

      /// <summary>
      /// Required, Max length = 50
      /// </summary>
      [Required]
      [MaxLength(50)]
      [StringLength(50)]
      public string EmailAddress { get; set; }

      /// <summary>
      /// Required, Max length = 50
      /// </summary>
      [Required]
      [MaxLength(50)]
      [StringLength(50)]
      public string EmailAddressAlt { get; set; }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public bool IsActive { get; set; }

        /*************************************************************************
         * Navigation properties
         *************************************************************************/
        public CompanyBranch CompanyBranch { get; set; }

    }
}

