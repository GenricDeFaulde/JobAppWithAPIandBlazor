//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v2.0.5.6
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace JobApp.Models.UserModel
{
   /// <summary>
   /// Contact data of the user
   /// </summary>
   public class UserContactData
   {
      //partial void Init();

      ///// <summary>
      ///// Default constructor. Protected due to required properties, but present because EF needs it.
      ///// </summary>
      //protected UserContactData()
      //{
      //   Init();
      //}

      ///// <summary>
      ///// Replaces default constructor, since it's protected. Caller assumes responsibility for setting all required values before saving.
      ///// </summary>
      //public static UserContactData CreateUserContactDataUnsafe()
      //{
      //   return new UserContactData();
      //}

      ///// <summary>
      ///// Public constructor with required data
      ///// </summary>
      ///// <param name="userid">Required</param>
      ///// <param name="addressnation">Required, Max length = 50     Address of User - Nation</param>
      ///// <param name="addresscity">Required, Min length = 5, Max length = 50     Address of User - City including PO number</param>
      ///// <param name="addressstreet">Required, Max length = 50     Address of User - Street including house number</param>
      ///// <param name="addressstate">Required, Max length = 50     Address of User - State if applicable</param>
      ///// <param name="phonenumber">Required, Max length = 30     Users main phone number</param>
      ///// <param name="emailaddress">Required, Max length = 50     Users main email address</param>
      ///// <param name="current">Historic retention property</param>
      ///// <param name="_user0"></param>
      //public UserContactData(int userid, string addressnation, string addresscity, string addressstreet, string addressstate, string phonenumber, string emailaddress, bool current, global::JobApp.Models.UserModel.User _user0)
      //{
      //   this.UserId = userid;

      //   if (string.IsNullOrEmpty(addressnation)) throw new ArgumentNullException(nameof(addressnation));
      //   this.AddressNation = addressnation;

      //   if (string.IsNullOrEmpty(addresscity)) throw new ArgumentNullException(nameof(addresscity));
      //   this.AddressCity = addresscity;

      //   if (string.IsNullOrEmpty(addressstreet)) throw new ArgumentNullException(nameof(addressstreet));
      //   this.AddressStreet = addressstreet;

      //   if (string.IsNullOrEmpty(addressstate)) throw new ArgumentNullException(nameof(addressstate));
      //   this.AddressState = addressstate;

      //   if (string.IsNullOrEmpty(phonenumber)) throw new ArgumentNullException(nameof(phonenumber));
      //   this.PhoneNumber = phonenumber;

      //   if (string.IsNullOrEmpty(emailaddress)) throw new ArgumentNullException(nameof(emailaddress));
      //   this.EmailAddress = emailaddress;

      //   this.Current = current;

      //   if (_user0 == null) throw new ArgumentNullException(nameof(_user0));
      //   _user0.ContactData = this;


      //   Init();
      //}

      ///// <summary>
      ///// Static create function (for use in LINQ queries, etc.)
      ///// </summary>
      ///// <param name="userid">Required</param>
      ///// <param name="addressnation">Required, Max length = 50     Address of User - Nation</param>
      ///// <param name="addresscity">Required, Min length = 5, Max length = 50     Address of User - City including PO number</param>
      ///// <param name="addressstreet">Required, Max length = 50     Address of User - Street including house number</param>
      ///// <param name="addressstate">Required, Max length = 50     Address of User - State if applicable</param>
      ///// <param name="phonenumber">Required, Max length = 30     Users main phone number</param>
      ///// <param name="emailaddress">Required, Max length = 50     Users main email address</param>
      ///// <param name="current">Historic retention property</param>
      ///// <param name="_user0"></param>
      //public static UserContactData Create(int userid, string addressnation, string addresscity, string addressstreet, string addressstate, string phonenumber, string emailaddress, bool current, global::JobApp.Models.UserModel.User _user0)
      //{
      //   return new UserContactData(userid, addressnation, addresscity, addressstreet, addressstate, phonenumber, emailaddress, current, _user0);
      //}

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Identity, Required
      /// Identity, Required
      /// </summary>
      [Key]
      [Required]
      public int Id { get; protected set; }

      /// <summary>
      /// Required
      /// Required
      /// </summary>
      [Required]
      public int UserId { get; set; }

      /// <summary>
      /// Required, Max length = 50
      /// Required, Max length = 50     Address of User - Nation
      /// </summary>
      [Required]
      [MaxLength(50)]
      [StringLength(50)]
      public string AddressNation { get; set; }

      /// <summary>
      /// Required, Min length = 5, Max length = 50
      /// Required, Min length = 5, Max length = 50     Address of User - City including PO
      /// number
      /// </summary>
      [Required]
      [MinLength(5)]
      [MaxLength(50)]
      [StringLength(50)]
      public string AddressCity { get; set; }

      /// <summary>
      /// Required, Max length = 50
      /// Required, Max length = 50     Address of User - Street including house number
      /// </summary>
      [Required]
      [MaxLength(50)]
      [StringLength(50)]
      public string AddressStreet { get; set; }

      /// <summary>
      /// Required, Max length = 50
      /// Required, Max length = 50     Address of User - State if applicable
      /// </summary>
      [Required]
      [MaxLength(50)]
      [StringLength(50)]
      public string AddressState { get; set; }

      /// <summary>
      /// Required, Max length = 30
      /// Required, Max length = 30     Users main phone number
      /// </summary>
      [Required]
      [MaxLength(30)]
      [StringLength(30)]
      public string PhoneNumber { get; set; }

      /// <summary>
      /// Max length = 50
      /// Max length = 50     Users alternative phone number
      /// </summary>
      [MaxLength(50)]
      [StringLength(50)]
      public string PhoneNumberAlt { get; set; }

      /// <summary>
      /// Required, Max length = 50
      /// Required, Max length = 50     Users main email address
      /// </summary>
      [Required]
      [MaxLength(50)]
      [StringLength(50)]
      public string EmailAddress { get; set; }

      /// <summary>
      /// Max length = 50
      /// Required, Max length = 50     Users alternative email address
      /// </summary>
      [MaxLength(50)]
      [StringLength(50)]
      public string EmailAddressAlt { get; set; }

      /// <summary>
      /// Required
      /// Historic retention property
      /// </summary>
      [Required]
      public bool Current { get; set; }

        /*************************************************************************
         * Navigation properties
         *************************************************************************/
        public User User { get; set; }

    }
}

